version: '3'

services:
  zookeeper:
    image: zookeeper:3.4.13
    restart: always
    environment:
      ZOO_MY_ID: 1
      ZOO_SERVERS: server.1=zookeeper:2888:3888
  kafka:
    networks:
      default:
        aliases:
          - ${INTERFACE_IP}
    image: wurstmeister/kafka:2.11-1.1.1
    restart: always
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_ADVERTISED_HOST_NAME: ${INTERFACE_IP:-127.0.0.1}
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_BROKER_ID: 0
      KAFKA_LOG_DIRS: /kafka/kafka-logs
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  normalizer:
    image: wizzieio/normalizer:0.6.1.1
    restart: always
    depends_on:
      - kafka
    environment:
       APPLICATION_ID: wizzie-stack
       KAFKA_BOOTSTRAP_SERVER: kafka:9092
       METRIC_ENABLE: 'true'
  enricher:
    image: wizzieio/enricher:0.5.1
    restart: always
    depends_on:
      - kafka
    environment:
       APPLICATION_ID: wizzie-stack
       KAFKA_BOOTSTRAP_SERVER: kafka:9092
       METRIC_ENABLE: 'true'
  zz-cep:
    image: wizzieio/zz-cep:0.4.0
    restart: always
    depends_on:
      - kafka
    environment:
       APPLICATION_ID: wizzie-stack
       KAFKA_BOOTSTRAP_SERVER: kafka:9092
       METRIC_ENABLE: 'true'

  druid-init:
    image: wizzieio/druid:0.12.1
    depends_on:
      - zookeeper
    volumes:
      - druid-share-volume:/opt/druid/var
    entrypoint: /bin/bash -c "/bin/bash -c \"$${@}\""
    command: |
      /bin/bash -c "
        mkdir -p /opt/druid/log
        mkdir -p /opt/druid/var/tmp;
        mkdir -p /opt/druid/var/druid/indexing-logs;
        mkdir -p /opt/druid/var/druid/segments;
        mkdir -p /opt/druid/var/druid/segment-cache;
        mkdir -p /opt/druid/var/druid/task;
        mkdir -p /opt/druid/vardruid/hadoop-tmp;
        mkdir -p /opt/druid/var/druid/pids;
      "
  druid-coordinator:
    image: druid-wizzieio
    build: druid/.
    restart: always
    depends_on:
      - zookeeper
      - druid-init
    volumes:
      - druid-share-volume:/opt/druid/var
    environment:
       ZOOKEEPER_SERVER: zookeeper:2181
       DRUID_SERVICE: coordinator
       DRUID_HOST: druid-coordinator
       DRUID_SERVICE_PORT: 8081
       DRUID_JVM_ARGS: "-server -Xms256m -Xmx256m -Duser.timezone=UTC -Dfile.encoding=UTF-8 -Djava.io.tmpdir=var/tmp -Djava.util.logging.manager=org.apache.logging.log4j.jul.LogManager -Dderby.stream.error.file=var/druid/derby.log "
  druid-overlord:
    image: druid-wizzieio
    build: druid/.
    restart: always
    depends_on:
      - zookeeper
      - druid-init
      - druid-coordinator
    ports:
      - 8084:8084
    volumes:
      - druid-share-volume:/opt/druid/var
    environment:
       ZOOKEEPER_SERVER: zookeeper:2181
       DRUID_SERVICE: overlord
       DRUID_HOST: druid-overlord
       DRUID_SERVICE_PORT: 8084
       DRUID_JVM_ARGS: "-server -Xms256m -Xmx256m -Duser.timezone=UTC -Dfile.encoding=UTF-8 -Djava.io.tmpdir=var/tmp -Djava.util.logging.manager=org.apache.logging.log4j.jul.LogManager "
  druid-broker:
    image: druid-wizzieio
    build: druid/.
    restart: always
    ports:
      - 8080:8080
    depends_on:
      - zookeeper
      - druid-init
    volumes:
      - druid-share-volume:/opt/druid/var
    environment:
       ZOOKEEPER_SERVER: zookeeper:2181
       DRUID_SERVICE: broker
       DRUID_HOST: druid-broker
       DRUID_SERVICE_PORT: 8080
       DRUID_JVM_ARGS: "-server -Xms1g -Xmx1g -XX:MaxDirectMemorySize=1792m -Duser.timezone=UTC -Dfile.encoding=UTF-8 -Djava.io.tmpdir=var/tmp -Djava.util.logging.manager=org.apache.logging.log4j.jul.LogManager "
  druid-middlemanager:
    image: druid-wizzieio
    build: druid/.
    restart: always
    depends_on:
      - zookeeper
      - druid-init
    volumes:
      - druid-share-volume:/opt/druid/var
    environment:
       ZOOKEEPER_SERVER: zookeeper:2181
       DRUID_SERVICE: middleManager
       DRUID_HOST: druid-middlemanager
       DRUID_SERVICE_PORT: 8091
       DRUID_JVM_ARGS: "-server -Xms64m -Xmx64m -Duser.timezone=UTC -Dfile.encoding=UTF-8 -Djava.io.tmpdir=var/tmp -Djava.util.logging.manager=org.apache.logging.log4j.jul.LogManager "
  druid-historical:
    image: druid-wizzieio
    build: druid/.
    restart: always
    depends_on:
      - zookeeper
      - druid-init
    volumes:
      - druid-share-volume:/opt/druid/var
    environment:
       ZOOKEEPER_SERVER: zookeeper:2181
       DRUID_SERVICE: historical
       DRUID_HOST: druid-historical
       DRUID_SERVICE_PORT: 8081
       DRUID_JVM_ARGS: "-server -Xms1g -Xmx1g -XX:MaxDirectMemorySize=1280m -Duser.timezone=UTC -Dfile.encoding=UTF-8 -Djava.io.tmpdir=var/tmp -Djava.util.logging.manager=org.apache.logging.log4j.jul.LogManager "

  postgres:
    environment:
      POSTGRES_USER: app_user
      POSTGRES_PASSWORD: app_password
    image: 'postgres:9'
    volumes:
      - 'postgres:/var/lib/postgresql/data'
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
  redis:
    image: 'redis:3.2-alpine'
    command: redis-server
    volumes:
      - 'redis:/data'
  sidekiq:
    image: wizzieio/wizz-vis:0.7
    depends_on:
       - redis
       - postgres
    entrypoint: scripts/docker-entrypoint-sidekiq.sh
    environment:
      DB_HOST: postgres
      DB_USER: app_user
      DB_PASSWORD: app_password
      REDIS_URL: redis://redis:6379/0
      RAILS_LOG_TO_STDOUT: 1
    env_file:
      - '.env'
  wizz-vis:
    image: wizzieio/wizz-vis:0.7
    depends_on:
      - sidekiq
    entrypoint: scripts/docker-entrypoint-web-prod.sh
    ports:
      - '3000:3000'
    environment:
      DB_HOST: postgres
      DB_USER: app_user
      DB_PASSWORD: app_password
      REDIS_URL: redis://redis:6379/0
      RAILS_LOG_TO_STDOUT: 1
    env_file:
      - '.env'

volumes:
  druid-share-volume:
  redis:
  postgres:
